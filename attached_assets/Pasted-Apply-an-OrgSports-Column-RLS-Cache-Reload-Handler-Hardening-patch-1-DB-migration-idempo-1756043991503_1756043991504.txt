Apply an “OrgSports Column + RLS + Cache Reload + Handler Hardening” patch: (1) DB migration (idempotent) add missing columns and policies, then reload the PostgREST schema cache. Create a new SQL file under db/migrations that:
a) Adds the contact_user_id column to public.org_sports if missing:

ALTER TABLE public.org_sports
  ADD COLUMN IF NOT EXISTS contact_user_id uuid NULL REFERENCES auth.users(id) ON DELETE SET NULL;


b) (For safety) ensure org table extras also exist (no-ops if already):

ALTER TABLE public.organizations
  ADD COLUMN IF NOT EXISTS color_palette jsonb NOT NULL DEFAULT '[]'::jsonb,
  ADD COLUMN IF NOT EXISTS gradient_css  text,
  ADD COLUMN IF NOT EXISTS tags          text[] NOT NULL DEFAULT '{}',
  ADD COLUMN IF NOT EXISTS is_archived   boolean NOT NULL DEFAULT false;


c) RLS for org_sports (idempotent): enable RLS and (re)create policies —
• INSERT: any authenticated member of the org may insert:

ALTER TABLE public.org_sports ENABLE ROW LEVEL SECURITY;
DROP POLICY IF EXISTS org_sports_insert ON public.org_sports;
CREATE POLICY org_sports_insert
ON public.org_sports FOR INSERT TO authenticated
WITH CHECK (
  EXISTS (
    SELECT 1 FROM public.user_roles ur
    WHERE ur.user_id = auth.uid()
      AND ur.org_id  = org_sports.organization_id
  )
);


• SELECT: org members only:

DROP POLICY IF EXISTS org_sports_select ON public.org_sports;
CREATE POLICY org_sports_select
ON public.org_sports FOR SELECT TO authenticated
USING (
  EXISTS (
    SELECT 1 FROM public.user_roles ur
    WHERE ur.user_id = auth.uid()
      AND ur.org_id  = org_sports.organization_id
  )
);


• UPDATE/DELETE (admins of that org):

DROP POLICY IF EXISTS org_sports_update ON public.org_sports;
CREATE POLICY org_sports_update
ON public.org_sports FOR UPDATE TO authenticated
USING (public.is_org_admin(auth.uid(), org_sports.organization_id))
WITH CHECK (public.is_org_admin(auth.uid(), org_sports.organization_id));

DROP POLICY IF EXISTS org_sports_delete ON public.org_sports;
CREATE POLICY org_sports_delete
ON public.org_sports FOR DELETE TO authenticated
USING (public.is_org_admin(auth.uid(), org_sports.organization_id));


d) PostgREST schema reload RPC and call it:

CREATE OR REPLACE FUNCTION public.pgrst_reload()
RETURNS void LANGUAGE sql AS $$ SELECT pg_notify('pgrst','reload schema'); $$;
SELECT public.pgrst_reload();


e) RLS self-tests RPC (Boolean probes) for future checks:

CREATE OR REPLACE FUNCTION public.org_can_insert() RETURNS boolean
LANGUAGE sql SECURITY INVOKER AS $$ SELECT auth.uid() IS NOT NULL; $$;
CREATE OR REPLACE FUNCTION public.org_sports_can_insert(p_org uuid) RETURNS boolean
LANGUAGE sql SECURITY INVOKER AS $$
  SELECT EXISTS (
    SELECT 1 FROM public.user_roles
    WHERE user_id = auth.uid() AND org_id = p_org
  );
$$;


(2) Diagnostics routes add server/routes/admin/rls.ts, mounted once under /api/v1/admin/rls, with:
• POST /schema/reload → supabaseAdmin.rpc('pgrst_reload') returns { reloaded:true }
• POST /selftest/org (requireAuth) → supabaseForUser(token).rpc('org_can_insert')
• POST /selftest/org-sports (requireAuth, body { orgId }) → supabaseForUser(token).rpc('org_sports_can_insert', { p_org: orgId })
(3) Create handler hardening in server/routes/organizations/index.ts:
• Use the user token client for all org inserts: const sb = supabaseForUser(req.headers.authorization?.slice(7));
• When inserting sports contacts, use the correct column names for org_sports — organization_id (not org_id), sport_id, contact_name, contact_email, contact_user_id.
• After creating/locating the coach user with supabaseAdmin.auth.admin.*, insert the org_sports row with contact_user_id set.
• After inserting the org, do a select().single() using the same sb client so RLS immediately sees membership from the bootstrap trigger.
• Default colorPalette to [] and compute gradient_css from brandPrimary/brandSecondary.
(4) (Optional) trust-proxy fix in server/index.ts add app.set('trust proxy', 1); before rate limiting.
(5) Run & verify: run the migration; then npm run preflight && npm run check && npm run dev. Print a checklist with ✅/❌:
• org_sports.contact_user_id exists,
• pg_policies shows org_sports_* policies,
• PostgREST reload OK,
• /api/v1/admin/rls/selftest/org returns true with a real token,
• /api/v1/admin/rls/selftest/org-sports returns true when called with a body { orgId:<newly-created-id> },
• Org creation now succeeds; sports contacts are inserted using organization_id, and contact_user_id is populated.
Do not create duplicate mounts or touch client/_legacy.