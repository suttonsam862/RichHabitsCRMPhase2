# Mode: High-Power, Codebase-Only
# Objective: Execute a full-stack stabilization patch for the Rich Habits CRM.
# This involves fixing the database schema, hardening RLS policies, unifying the backend API,
# and repairing the frontend organization creation wizard.
# The core issues are schema drift and incorrect RLS policies preventing organization creation.

- role: "system"
  content: "You are an expert full-stack engineer tasked with applying a critical stability patch. Follow each instruction precisely. Do not deviate. Verify file paths before writing."

- role: "user"
  content: |
    Apply the following stabilization patch to the codebase.

    **STEP 1: DATABASE MIGRATION**
    CREATE the file `/db/migrations/2025_08_24_stabilize_organizations.sql` with the exact following SQL content:
    ```sql
    -- FILE: /db/migrations/2025_08_24_stabilize_organizations.sql
    -- PURPOSE: This is a single, consolidated migration to fix critical schema and RLS issues.
    -- It addresses schema drift and incorrect policies that are blocking organization creation.

    BEGIN;

    -- STEP 1: Add the 'created_by' column to the organizations table.
    ALTER TABLE public.organizations
    ADD COLUMN IF NOT EXISTS created_by UUID;

    DO $$
    BEGIN
        IF NOT EXISTS (
            SELECT 1
            FROM   pg_constraint
            WHERE  conname = 'organizations_created_by_fkey'
        )
        THEN
            ALTER TABLE public.organizations
            ADD CONSTRAINT organizations_created_by_fkey
            FOREIGN KEY (created_by)
            REFERENCES auth.users(id)
            ON DELETE SET NULL;
        END IF;
    END;
    $$;

    -- STEP 2: Correct the 'org_sports' table.
    ALTER TABLE public.org_sports
    DROP COLUMN IF EXISTS contact_user_id;

    -- STEP 3: Rebuild RLS policies for 'organizations' from scratch.
    ALTER TABLE public.organizations ENABLE ROW LEVEL SECURITY;
    DROP POLICY IF EXISTS "Allow all access to organizations" ON public.organizations;
    DROP POLICY IF EXISTS "Enable read access for all users" ON public.organizations;
    DROP POLICY IF EXISTS "Users can insert their own organizations" ON public.organizations;
    DROP POLICY IF EXISTS "Users can update their own organizations" ON public.organizations;
    DROP POLICY IF EXISTS "Users can delete their own organizations" ON public.organizations;

    CREATE POLICY "Users can view their own organizations" ON public.organizations FOR SELECT USING (auth.uid() = created_by);
    CREATE POLICY "Users can insert organizations for themselves" ON public.organizations FOR INSERT WITH CHECK (auth.uid() = created_by);
    CREATE POLICY "Users can update their own organizations" ON public.organizations FOR UPDATE USING (auth.uid() = created_by) WITH CHECK (auth.uid() = created_by);
    CREATE POLICY "Users can delete their own organizations" ON public.organizations FOR DELETE USING (auth.uid() = created_by);

    -- STEP 4: Rebuild RLS policies for 'org_sports'.
    ALTER TABLE public.org_sports ENABLE ROW LEVEL SECURITY;
    DROP POLICY IF EXISTS "Enable read access for all users" ON public.org_sports;
    DROP POLICY IF EXISTS "Allow full access to org sports" ON public.org_sports;

    CREATE POLICY "Users can view sports of their own organizations" ON public.org_sports FOR SELECT USING (EXISTS (SELECT 1 FROM organizations WHERE organizations.id = org_sports.organization_id AND organizations.created_by = auth.uid()));
    CREATE POLICY "Users can insert sports for their own organizations" ON public.org_sports FOR INSERT WITH CHECK (EXISTS (SELECT 1 FROM organizations WHERE organizations.id = org_sports.organization_id AND organizations.created_by = auth.uid()));
    CREATE POLICY "Users can update sports for their own organizations" ON public.org_sports FOR UPDATE USING (EXISTS (SELECT 1 FROM organizations WHERE organizations.id = org_sports.organization_id AND organizations.created_by = auth.uid()));
    CREATE POLICY "Users can delete sports from their own organizations" ON public.org_sports FOR DELETE USING (EXISTS (SELECT 1 FROM organizations WHERE organizations.id = org_sports.organization_id AND organizations.created_by = auth.uid()));

    COMMIT;
    ```

    **STEP 2: APPLY DATABASE MIGRATION**
    RUN the following command in the shell: `npm run db:push`

    **STEP 3: BACKEND CODE ALIGNMENT**
    REPLACE the entire content of `/shared/schema.ts` with:
    ```typescript
    import { pgTable, text, timestamp, uuid, varchar, jsonb, integer, primaryKey } from 'drizzle-orm/pg-core';
    import { relations } from 'drizzle-orm';
    
    export const users = pgTable('users', { id: uuid('id').primaryKey(), email: text('email'), role: text('role') });
    export const organizations = pgTable('organizations', {
      id: uuid('id').primaryKey().defaultRandom(),
      name: varchar('name', { length: 255 }).notNull(),
      address: text('address'), city: text('city'), state: text('state'), zip: text('zip'),
      phone: text('phone'), email: text('email'), website: text('website'), logoUrl: text('logo_url'),
      primaryColor: text('primary_color'), secondaryColor: text('secondary_color'), tertiaryColor: text('tertiary_color'),
      titleCardUrl: text('title_card_url'),
      createdAt: timestamp('created_at').defaultNow().notNull(),
      updatedAt: timestamp('updated_at').defaultNow().notNull(),
      createdBy: uuid('created_by').references(() => users.id),
    });
    export const sports = pgTable('sports', { id: uuid('id').primaryKey().defaultRandom(), name: text('name').notNull().unique() });
    export const orgSports = pgTable('org_sports', {
        organizationId: uuid('organization_id').references(() => organizations.id).notNull(),
        sportId: uuid('sport_id').references(() => sports.id).notNull(),
    }, (t) => ({ pk: primaryKey({ columns: [t.organizationId, t.sportId] }) }));
    export const usersRelations = relations(users, ({ many }) => ({ organizations: many(organizations) }));
    export const organizationsRelations = relations(organizations, ({ one, many }) => ({ createdBy: one(users, { fields: [organizations.createdBy], references: [users.id] }), orgSports: many(orgSports) }));
    export const sportsRelations = relations(sports, ({ many }) => ({ orgSports: many(orgSports) }));
    export const orgSportsRelations = relations(orgSports, ({ one }) => ({
        organization: one(organizations, { fields: [orgSports.organizationId], references: [organizations.id] }),
        sport: one(sports, { fields: [orgSports.sportId], references: [sports.id] }),
    }));
    ```
    REPLACE the entire content of `/server/routes/organizations/hardened.ts` with:
    ```typescript
    import { Router } from 'express';
    import { db } from '../../db';
    import { organizations, orgSports } from '../../../shared/schema';
    import { asyncHandler } from '../middleware/asyncHandler';
    import { authenticate } from '../../middleware/auth';
    import { createOrganizationSchema } from '../../../shared/schemas/organization';
    import { BadRequestError } from '../../lib/errors';
    import { eq } from 'drizzle-orm';
    const router = Router();
    router.use(authenticate);
    router.get('/', asyncHandler(async (req, res) => {
        const orgs = await db.select().from(organizations);
        res.status(200).json(orgs);
    }));
    router.post('/', asyncHandler(async (req, res) => {
        const userId = (req as any).user?.id;
        if (!userId) { throw new BadRequestError('User ID not found on authenticated request.'); }
        const validation = createOrganizationSchema.safeParse(req.body);
        if (!validation.success) { throw new BadRequestError('Invalid organization data', validation.error.flatten().fieldErrors); }
        const { sports: sportIds, ...orgData } = validation.data;
        const dataToInsert = { ...orgData, createdBy: userId };
        const newOrg = await db.transaction(async (tx) => {
            const [insertedOrg] = await tx.insert(organizations).values(dataToInsert).returning();
            if (sportIds && sportIds.length > 0) {
                const orgSportsData = sportIds.map((sportId: string) => ({ organizationId: insertedOrg.id, sportId }));
                await tx.insert(orgSports).values(orgSportsData);
            }
            return insertedOrg;
        });
        res.status(201).json(newOrg);
    }));
    router.get('/:id', asyncHandler(async (req, res) => {
        const { id } = req.params;
        const [org] = await db.select().from(organizations).where(eq(organizations.id, id));
        if (!org) { return res.status(404).json({ message: 'Organization not found or you do not have permission to view it.' }); }
        res.status(200).json(org);
    }));
    export default router;
    ```
    REPLACE the entire content of `/server/routes/index.ts` with:
    ```typescript
    import { Router } from 'express';
    import authRoutes from './auth';
    import usersRoutes from './users';
    import hardenedOrganizationsRoutes from './organizations/hardened';
    import sportsRoutes from './sports';
    import uploadRoutes from './upload';
    import adminRoutes from './admin';
    const router = Router();
    router.get('/healthcheck', (req, res) => res.status(200).json({ status: 'ok', timestamp: new Date().toISOString() }));
    router.use('/auth', authRoutes);
    router.use('/users', usersRoutes);
    router.use('/organizations', hardenedOrganizationsRoutes);
    router.use('/sports', sportsRoutes);
    router.use('/upload', uploadRoutes);
    router.use('/admin', adminRoutes);
    export default router;
    ```
    REPLACE the entire content of `/server/routes/organizations/index.ts` with:
    ```typescript
    // This file is deprecated and has been replaced by ./organizations/hardened.ts
    import { Router } from 'express';
    const router = Router();
    export default router;
    ```

    **STEP 4: FRONTEND CODE ALIGNMENT**
    REPLACE the entire content of `/client/src/lib/api/organizations.ts` with:
    ```typescript
    import { supabase } from '../supabase';
    import { Organization } from '../../../shared/schemas/organization';
    import { handleApiError } from '../utils';
    const BASE_URL = '/api/organizations';
    export const createOrganization = async (organizationData: Omit<Organization, 'id' | 'createdAt' | 'updatedAt' | 'createdBy'> & { sports?: string[] }): Promise<Organization> => {
      try {
        const token = (await supabase.auth.getSession()).data.session?.access_token;
        if (!token) { throw new Error('Authentication token not found.'); }
        const response = await fetch(BASE_URL, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${token}` },
          body: JSON.stringify(organizationData),
        });
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || 'Failed to create organization');
        }
        return await response.json();
      } catch (error) {
        return handleApiError(error);
      }
    };
    export const getOrganizations = async (): Promise<Organization[]> => {
        try {
            const token = (await supabase.auth.getSession()).data.session?.access_token;
            if (!token) { throw new Error('Authentication token not found.'); }
            const response = await fetch(BASE_URL, { headers: { 'Authorization': `Bearer ${token}` } });
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || 'Failed to fetch organizations');
            }
            return await response.json();
        } catch (error) {
            return handleApiError(error);
        }
    };
    ```
    REPLACE the entire content of `/client/src/components/organization-wizard/org-wizard-modal.tsx` with:
    ```tsx
    import React, { useState } from 'react';
    import { useForm } from 'react-hook-form';
    import { zodResolver } from '@hookform/resolvers/zod';
    import { z } from 'zod';
    import { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';
    import { Button } from '../ui/button';
    import { useToast } from '../../hooks/use-toast';
    import { PrimaryStep } from './primary-step';
    import { BrandingStep } from './branding-step';
    import { SportsContactsStep } from './sports-contacts-step';
    import { createOrganizationSchema } from '../../../shared/schemas/organization';
    import { createOrganization } from '../../lib/api/organizations';
    import { useMutation, useQueryClient } from '@tanstack/react-query';
    const wizardSchema = createOrganizationSchema;
    type WizardFormData = z.infer<typeof wizardSchema>;
    interface OrgWizardModalProps { isOpen: boolean; onClose: () => void; }
    export const OrgWizardModal: React.FC<OrgWizardModalProps> = ({ isOpen, onClose }) => {
      const [step, setStep] = useState(1);
      const { toast } = useToast();
      const queryClient = useQueryClient();
      const form = useForm<WizardFormData>({
        resolver: zodResolver(wizardSchema),
        defaultValues: { name: '', address: '', city: '', state: '', zip: '', phone: '', email: '', website: '', sports: [] },
      });
      const mutation = useMutation({
        mutationFn: createOrganization,
        onSuccess: () => {
          toast({ title: 'Success', description: 'Organization created successfully.' });
          queryClient.invalidateQueries({ queryKey: ['organizations'] });
          onClose();
          form.reset();
          setStep(1);
        },
        onError: (error: Error) => {
          toast({ title: 'Error', description: error.message || 'Could not create organization.', variant: 'destructive' });
        },
      });
      const onSubmit = (data: WizardFormData) => {
        console.log('Submitting organization data:', data);
        mutation.mutate(data);
      };
      const nextStep = () => setStep((prev) => prev + 1);
      const prevStep = () => setStep((prev) => prev - 1);
      return (
        <Dialog open={isOpen} onOpenChange={onClose}>
          <DialogContent className="sm:max-w-[600px] bg-gray-900/80 backdrop-blur-sm border-purple-500/30 text-white">
            <DialogHeader><DialogTitle>Create New Organization - Step {step} of 3</DialogTitle></DialogHeader>
            <form onSubmit={form.handleSubmit(onSubmit)}>
              <div className="space-y-4 p-1">
                {step === 1 && <PrimaryStep form={form} />}
                {step === 2 && <BrandingStep form={form} />}
                {step === 3 && <SportsContactsStep form={form} />}
              </div>
              <div className="flex justify-between mt-6 pt-4 border-t border-gray-700">
                {step > 1 && (<Button type="button" variant="outline" onClick={prevStep}>Back</Button>)}
                {step < 3 && (<Button type="button" onClick={nextStep} className="ml-auto">Next</Button>)}
                {step === 3 && (<Button type="submit" disabled={mutation.isPending} className="ml-auto bg-green-600 hover:bg-green-700">{mutation.isPending ? 'Creating...' : 'Create Organization'}</Button>)}
              </div>
            </form>
          </DialogContent>
        </Dialog>
      );
    };
    ```

    **STEP 5: VERIFY AND RESTART**
    After applying all file changes, stop and restart the Replit environment to ensure all changes take effect.
