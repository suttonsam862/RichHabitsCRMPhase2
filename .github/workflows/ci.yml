name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  DATABASE_URL: postgresql://test:test@localhost:5432/test_db
  JWT_SECRET: test-jwt-secret
  SUPABASE_URL: https://test.supabase.co
  SUPABASE_ANON_KEY: test-anon-key
  SUPABASE_SERVICE_ROLE_KEY: test-service-key

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run ESLint
        run: npm run lint
      
      - name: Check TypeScript
        run: npm run check

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run database migrations
        run: npm run db:push --force
      
      - name: Run unit tests
        run: npx vitest run tests/unit --reporter=verbose
      
      - name: Run integration tests
        run: npx vitest run tests/integration --reporter=verbose
      
      - name: Run security tests
        run: npx vitest run tests/security --reporter=verbose
      
      - name: Generate coverage report
        run: npx vitest run --coverage
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/coverage-final.json
          flags: unittests
          name: codecov-umbrella

  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install Playwright
        run: npx playwright install --with-deps chromium
      
      - name: Build application
        run: npm run build
      
      - name: Start server
        run: |
          npm run preview &
          npx wait-on http://localhost:5000 -t 30000
      
      - name: Run E2E tests
        run: npx playwright test --reporter=html
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run npm audit
        run: npm audit --audit-level=moderate
      
      - name: Security vulnerability scan
        run: npx audit-ci --moderate
        continue-on-error: true
      
      - name: Run security linting
        run: npx eslint . --ext .ts,.tsx,.js,.jsx --config .eslintrc-security.js
        continue-on-error: true
      
      - name: Check for hardcoded secrets
        run: |
          # Check for potential secrets in code
          grep -r -i "password\s*=" --include="*.ts" --include="*.js" . || true
          grep -r -i "api[_-]key" --include="*.ts" --include="*.js" . || true
          grep -r -i "secret" --include="*.ts" --include="*.js" . || true
      
      - name: Run dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'rich-habits-crm'
          path: '.'
          format: 'HTML'
        continue-on-error: true
      
      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-reports
          path: reports/
        if: always()

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, e2e, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Replit
        run: echo "Deployment handled by Replit Deployments"
      
      - name: Notify deployment
        run: |
          echo "âœ… Deployment triggered for commit ${{ github.sha }}"
          echo "View deployment at: https://your-app.replit.app"